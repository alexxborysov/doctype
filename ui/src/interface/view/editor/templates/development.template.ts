/* eslint-disable no-useless-escape */
import type { NoteSource } from '~/domain/note';

export const DEVELOPMENT_TEMPLATE = `
  <h1>Development</h1><p>Creating a comprehensive task list is an essential first step in organizing workflow, enabling teams to visualize responsibilities, track progress, and meet deadlines.</p><p></p><ul class=\"bulletList\"><li><p>Project Planning</p><ul class=\"bulletList\"><li><p>Create project timeline</p></li><li><p>Set up team meetings</p></li><li><p>Define key milestones</p></li><li><p>Allocate resources</p></li></ul></li><li><p>Development Tasks</p><ul class=\"bulletList\"><li><p>Set up development environment</p></li><li><p>Create database schema</p></li><li><p>Implement user authentication</p></li><li><p>Build frontend components</p></li><li><p>Write unit tests</p></li></ul></li></ul><p></p><ul data-type=\"taskList\"><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Quality Assurance</p><ul data-type=\"taskList\"><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Perform code review</p></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Run integration tests</p></div></li><li data-checked=\"false\" data-type=\"taskItem\"><label><input type=\"checkbox\"><span></span></label><div><p>Fix reported bugs</p></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Document testing process</p></div></li></ul></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Launch Preparation</p><ul data-type=\"taskList\"><li data-checked=\"false\" data-type=\"taskItem\"><label><input type=\"checkbox\"><span></span></label><div><p>Finalize user documentation</p></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Prepare marketing materials</p></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Set up analytics tracking</p></div></li><li data-checked=\"true\" data-type=\"taskItem\"><label><input type=\"checkbox\" checked=\"checked\"><span></span></label><div><p>Plan rollout strategy</p></div></li></ul></div></li></ul><p></p><pre><code>import type { Option } from 'core';\nimport { makeAutoObservable } from 'mobx';\nimport type { Note, NoteId, NoteName } from '~/domain/note';\nimport { createEffect } from '~/interface/shared/lib/create-effect';\nimport { notifications } from '~/interface/shared/lib/notifications';\nimport { notesManagerModel, type NoteManagerModelInterface } from '../manager/model';\nimport { api } from './api';\n\nexport class NoteRenameModel {\n  state: Option&lt;{\n    noteId: NoteId;\n    enteredName: NoteName;\n    initialName: NoteName;\n  }&gt; = null;\n\n  constructor(private noteManagerModel: NoteManagerModelInterface) {\n    makeAutoObservable(this);\n  }\n\n  start(note: Note) {\n    this.state = {\n      noteId: note.id,\n      initialName: note.name,\n      enteredName: note.name,\n    };\n  }\n\n  update(payload: Pick&lt;Note, 'name'&gt;) {\n    if (this.state) this.state.enteredName = payload.name;\n  }\n\n  reset() {\n    this.state = null;\n  }\n\n  apply = createEffect(async () =&gt; {\n    const isChanged = this.state?.initialName !== this.state?.enteredName;\n    const canApply = this.state &amp;&amp; isChanged;\n\n    if (canApply) {\n      const preparedName = this.state!.enteredName?.length\n        ? (this.state!.enteredName.trim() as NoteName)\n        : (this.state!.initialName as NoteName);\n      const renameQuery = await api.rename({\n        data: {\n          id: this.state!.noteId,\n          name: preparedName,\n        },\n      });\n      if (renameQuery.success?.ok) {\n        await this.noteManagerModel.pull.run();\n      } else {\n        notifications.noteNotRenamed();\n      }\n    }\n\n    this.reset();\n  });\n}</code></pre><p></p>
` as NoteSource;
